\(lightPosition, mvm, pm, nm) () (v :: Real 4, n :: Real 3) ->

let specularContribution = 0.3 in
let diffuseContribution  = 1.0 - specularContribution in

let mv = mvm #. v in
let p = pm #. mv in

let ecPosition = strip mv in
let tnorm      = normalize (nm #. n) in
let lightVec   = normalize (lightPosition -- ecPosition) in
let reflectVec = reflect (--lightVec) tnorm in
let viewVec    = normalize (--ecPosition) in
let diffuse    = max (dot lightVec tnorm) 0.0 in

let spec =
  if diffuse > 0
    then pow (max (dot reflectVec viewVec) 0.0) 16
    else 0.0 in

let lightIntensity =
  diffuseContribution * diffuse + specularContribution * spec in

let mcPosition = v!![0,1] in

  (p, (lightIntensity, mcPosition))
